#!/usr/bin/env ruby

require 'net/http'
require 'uri'
require 'json'
require 'optparse'
require 'yaml'

# ANSI Color Helpers
def colorize(text, code); "\e[#{code}m#{text}\e[0m"; end
def red(text); colorize(text, 31); end       # errors, page/app headers
def blue(text); colorize(text, 34); end      # hostname
def magenta(text); colorize(text, 35); end   # program
def dim(text); colorize(text, 2); end        # optional severity

CONFIG_PATH = File.expand_path("~/.solarwinds_observability.yml")

# Load config early so CLI options can override it cleanly
config = File.exist?(CONFIG_PATH) ? YAML.load_file(CONFIG_PATH) : {}

# Start with config defaults
options = config.fetch("cli_options", {}).transform_keys(&:to_sym)

# Defaults if not in config
options[:direction] ||= 'backward'
options[:page_size] ||= 50
options[:pages]     ||= 1
options[:color]     = true if options[:color].nil?

# Parse CLI arguments, override config values
OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} <filter> [options]"

  opts.on("--group GROUP", "Filter by group name")               { |v| options[:group] = v }
  opts.on("--entity-id ID", "Filter by entity ID")              { |v| options[:entity_id] = v }
  opts.on("--start-time TIME", "Start time (ISO8601 UTC)")      { |v| options[:start_time] = v }
  opts.on("--end-time TIME", "End time (ISO8601 UTC)")          { |v| options[:end_time] = v }
  opts.on("--direction DIR", "Direction (backward, forward, tail)") { |v| options[:direction] = v }
  opts.on("--page-size N", Integer, "Logs per page (default: 50)")  { |v| options[:page_size] = v }
  opts.on("--pages N", Integer, "How many pages to fetch (default: 1)") { |v| options[:pages] = v }
  opts.on("--app NAME", "Use API token for app NAME from config")     { |v| options[:app] = v }
  opts.on("--all-apps", "Run the same query for all configured apps") { options[:all_apps] = true }
  opts.on("--list-apps", "List configured apps and exit")            { options[:list_apps] = true }
  opts.on("--no-color", "Disable color output")                      { options[:color] = false }
  opts.on("--json", "Output full raw JSON for each page")           { options[:json] = true }
  opts.on("--base-url URL", "Override base URL for API")           { |v| options[:base_url] = v }
end.parse!

# First positional arg = filter string
filter = ARGV.shift

# Handle --list-apps
if options[:list_apps]
  if config["apps"]
    puts "Available apps:"
    config["apps"].each_key do |name|
      marker = name == config["default"] ? " (default)" : ""
      puts "  - #{name}#{marker}"
    end
  else
    puts "No apps configured in #{CONFIG_PATH}"
  end
  exit
end

abort("Missing required filter argument.\nUse: #{$PROGRAM_NAME} <filter> [options]") if filter.nil? || filter.strip.empty?

# Ensure base_url is set
base_url = options[:base_url] || config["base_url"]
abort("Missing base_url: provide it in #{CONFIG_PATH} or pass with --base-url.") unless base_url

# Determine apps to run
apps_to_run =
  if options[:all_apps]
    config["apps"]&.keys || abort("No apps found in config to run with --all-apps.")
  else
    [options[:app] || config["default"] || abort("No app specified and no default in config.")]
  end

def select_token(config, app)
  config.dig("apps", app) || abort("App '#{app}' not found in config.")
end

def build_query_path(filter, options)
  params = {
    filter: filter,
    direction: options[:direction],
    pageSize: options[:page_size]
  }
  params[:group]     = options[:group]      if options[:group]
  params[:entityId]  = options[:entity_id]  if options[:entity_id]
  params[:startTime] = options[:start_time] if options[:start_time]
  params[:endTime]   = options[:end_time]   if options[:end_time]

  "/v1/logs?" + URI.encode_www_form(params)
end

def fetch_logs(token, base_url, path)
  uri = URI("#{base_url}#{path}")
  req = Net::HTTP::Get.new(uri)
  req['Authorization'] = "Bearer #{token}"
  req['accept'] = 'application/json'
  Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }
end

apps_to_run.each do |app_name|
  token = select_token(config, app_name)
  puts red("\n=== App: #{app_name} ===") if apps_to_run.size > 1

  path = build_query_path(filter, options)
  page = 1

  while page <= options[:pages]
    puts red("\n--- Page #{page} ---") if options[:pages] > 1

    response = fetch_logs(token, base_url, path)

    unless response.is_a?(Net::HTTPSuccess)
      warn red("Error #{response.code} for app #{app_name}: #{response.message}")
      warn response.body
      break
    end

    data = JSON.parse(response.body)

    if options[:json]
      puts JSON.pretty_generate(data)
    else
      logs = data['logs'] || []
      if logs.empty?
        puts "No logs found on page #{page}."
      else
        logs.each do |log|
          ts   = log['time']
          host = options[:color] ? blue(log['hostname']) : log['hostname']
          prog = options[:color] ? magenta(log['program']) : log['program']
          sev  = log['severity']
          msg  = log['message'].gsub(/\s+/, ' ').strip

          puts "[#{ts}] #{host} #{prog} #{sev}: #{msg}"
        end
      end
    end

    next_page = data.dig('pageInfo', 'nextPage')
    break unless next_page

    path = next_page
    page += 1
  end
end

